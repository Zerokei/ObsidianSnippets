/* configurations that can be customized in the Style Settings plugin */
body {
    --sidenote-default-position: right;
    --sidenote-width: 15rem;
    --sidenote-edgeout: unset;
    --sidenote-margin: 1rem;
    --sidenote-intrusive-width-notRLW: 25rem;
    --sidenote-intrusive-width-RLW-default-theme: 200px;
    --sidenote-intrusive-width-RLW-minimal-theme-default: 13rem;
    --sidenote-intrusive-width-RLW-minimal-theme-wide: 13rem;
    --sidenote-intrusive-width-RLW-minimal-theme-max: 20rem;
}


/* store inline margins on line blocks */

.markdown-preview-view .markdown-preview-sizer >div,
.markdown-source-view .cm-content >div {
    --sidenote-margins-r-non-intrusive: var(--sidenote-margin)  calc(-1 * var(--sidenote-width) - var(--sidenote-margin));
    --sidenote-margins-r-intrusive: var(--sidenote-margin)  var(--sidenote-edgeout);
    --sidenote-margins-l-non-intrusive: calc(-1 * var(--sidenote-width) - var(--sidenote-margin))  var(--sidenote-margin);
    --sidenote-margins-l-intrusive: var(--sidenote-edgeout)  calc(var(--sidenote-margin) + 1rem);
    /* when sidenote position is left, margin-right has to be larger to avoid overlap with main text bullet points */
}


/* use container to determine available spaces for sidenotes */
.markdown-reading-view, .markdown-source-view {
    container-name: PageContainer;
    container-type: inline-size;
}


/* assign values to --sidenote-width and --sidenote-edgeout variables based on cases */

/* when Readable Line Width is off */

.markdown-preview-view:not(.is-readable-line-width) .markdown-preview-sizer >div,
.markdown-source-view:not(.is-readable-line-width) .cm-content >div {
    --sidenote-width: min(var(--sidenote-intrusive-width-notRLW), 50%);
    --sidenote-edgeout: -2rem;
}

/* when Readable Line Width is on */

/* when the current document is not one-sided */

/* cases that are independent of .minimal-line-nums on/off */
.markdown-preview-view.is-readable-line-width:not(.leftsided):not(.rightsided) .markdown-preview-sizer >div,
.markdown-source-view.is-readable-line-width:not(.leftsided):not(.rightsided) .cm-content >div {
    /* when default theme is active, --file-line-width is 700px */
    @container PageContainer style(--file-margins: 32px) or (not style(--line-width)) {
        /* compare the visible width to file-line-width + (sidenote-width + sidenote-margin) * 2 + scrollbar-width */
        @container PageContainer (calc(700px + (350px + 1rem) * 2 + 10px) <= width) {
            --sidenote-width: 350px;
        }
        @container PageContainer (calc(700px + (262.5px + 1rem) * 2 + 10px) <= width < calc(700px + (350px + 1rem) * 2 + 10px)) {
            --sidenote-width: 262.5px;
        }
        @container PageContainer (calc(700px + (175px + 1rem) * 2 + 10px) <= width < calc(700px + (262.5px + 1rem) * 2 + 10px)) {
            --sidenote-width: 175px;
        }
        @container PageContainer (                                           width < calc(700px + (175px + 1rem) * 2 + 10px)) {
            --sidenote-width: min(var(--sidenote-intrusive-width-RLW-default-theme), 50%);
            --sidenote-edgeout: -2rem;
        }
    }
    /* when minimal-theme is active */
    @container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
        /* minimal-theme .max class line-width */
        @container style(--line-width: 88%) {
            --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-max), 50%);
            --sidenote-edgeout: -6.8%;
        }
    }
}
/* cases of minimal-theme with .minimal-line-nums on */
body.minimal-line-nums .markdown-preview-view.is-readable-line-width:not(.leftsided):not(.rightsided) .markdown-preview-sizer >div,
body.minimal-line-nums .markdown-source-view.is-readable-line-width:not(.leftsided):not(.rightsided) .cm-content >div {
    /* when minimal-theme is active */
    @container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
        /* minimal-theme default line-width */
        @container style(--line-width: 40rem) {
            /* compare the visible width to line-numbers-width + line-width + (sidenote-width + sidenote-margin) * 2 + scrollbar-width */
            @container PageContainer (calc(2rem + 40rem + (20rem + 1rem) * 2 + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(2rem + 40rem + (15rem + 1rem) * 2 + 10px) <= width < calc(2rem + 40rem + (20rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(2rem + 40rem + (10rem + 1rem) * 2 + 10px) <= width < calc(2rem + 40rem + (15rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                                  width < calc(2rem + 40rem + (10rem + 1rem) * 2 + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-default), 50%);
                --sidenote-edgeout: -6.8%;
            }
        }
        /* minimal-theme .wide class line-width */
        @container style(--line-width: 50rem) {
            /* compare the visible width to line-numbers-width + line-width + (sidenote-width + sidenote-margin) * 2 + scrollbar-width */
            @container PageContainer (calc(2rem + 50rem + (20rem + 1rem) * 2 + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(2rem + 50rem + (15rem + 1rem) * 2 + 10px) <= width < calc(2rem + 50rem + (20rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(2rem + 50rem + (10rem + 1rem) * 2 + 10px) <= width < calc(2rem + 50rem + (15rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                                  width < calc(2rem + 50rem + (10rem + 1rem) * 2 + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-wide), 50%);
                --sidenote-edgeout: -6.8%;
            }
        }
    }
}
/* cases of minimal-theme with .minimal-line-nums off */
body:not(.minimal-line-nums) .markdown-preview-view.is-readable-line-width:not(.leftsided):not(.rightsided) .markdown-preview-sizer >div,
body:not(.minimal-line-nums) .markdown-source-view.is-readable-line-width:not(.leftsided):not(.rightsided) .cm-content >div {
    /* when minimal-theme is active */
    @container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
        /* minimal-theme default line-width */
        @container style(--line-width: 40rem) {
            /* compare the visible width to line-width + (sidenote-width + sidenote-margin) * 2 + scrollbar-width */
            @container PageContainer (calc(40rem + (20rem + 1rem) * 2 + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(40rem + (15rem + 1rem) * 2 + 10px) <= width < calc(40rem + (20rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(40rem + (10rem + 1rem) * 2 + 10px) <= width < calc(40rem + (15rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                           width < calc(40rem + (10rem + 1rem) * 2 + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-default), 50%);
                --sidenote-edgeout: -6.8%;
            }
        }
        /* minimal-theme .wide class line-width */
        @container style(--line-width: 50rem) {
            /* compare the visible width to line-width + (sidenote-width + sidenote-margin) * 2 + scrollbar-width */
            @container PageContainer (calc(50rem + (20rem + 1rem) * 2 + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(50rem + (15rem + 1rem) * 2 + 10px) <= width < calc(50rem + (20rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(50rem + (10rem + 1rem) * 2 + 10px) <= width < calc(50rem + (15rem + 1rem) * 2 + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                           width < calc(50rem + (10rem + 1rem) * 2 + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-wide), 50%);
                --sidenote-edgeout: -6.8%;
            }
        }
    }
}

/* when the current document is leftsided/rightsided */

/* cases that are independent of .minimal-line-nums on/off */
.markdown-preview-view.is-readable-line-width:is(.leftsided, .rightsided) .markdown-preview-sizer >div,
.markdown-source-view.is-readable-line-width:is(.leftsided, .rightsided) .cm-content >div {
    /* when default theme is active, --file-line-width is 700px */
    @container PageContainer style(--file-margins: 32px) or (not style(--line-width)) {
        /* compare the visible width to file-margin-left + file-line-width + sidenote-margin + sidenote-width + scrollbar-width */
        @container PageContainer (calc(2rem + 700px + 1rem + 350px + 10px) <= width) {
            --sidenote-width: 350px;
        }
        @container PageContainer (calc(2rem + 700px + 1rem + 262.5px + 10px) <= width < calc(2rem + 700px + 1rem + 350px + 10px)) {
            --sidenote-width: 262.5px;
        }
        @container PageContainer (calc(2rem + 700px + 1rem + 175px + 10px) <= width < calc(2rem + 700px + 1rem + 262.5px + 10px)) {
            --sidenote-width: 175px;
        }
        @container PageContainer (                                            width < calc(2rem + 700px + 1rem + 175px + 10px)) {
            --sidenote-width: min(var(--sidenote-intrusive-width-RLW-default-theme), 50%);
            --sidenote-edgeout: -2rem;
        }
    }
    /* when minimal-theme is active */
    @container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
        /* minimal-theme .max class line-width */
        @container style(--line-width: 88%) {
            --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-max), 50%);
            --sidenote-edgeout: calc(-13.6% + 1rem);
        }
    }
}
/* cases of minimal-theme with .minimal-line-nums on */
body.minimal-line-nums .markdown-preview-view.is-readable-line-width:is(.leftsided, .rightsided) .markdown-preview-sizer >div,
body.minimal-line-nums .markdown-source-view.is-readable-line-width:is(.leftsided, .rightsided) .cm-content >div {
    /* when minimal-theme is active */
    @container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
        /* minimal-theme default line-width */
        @container style(--line-width: 40rem) {
            /* compare the visible width to line-numbers-width + minimal-extra-margin + line-width + sidenote-margin + sidenote-width + scrollbar-width */
            @container PageContainer (calc(2rem + 1rem + 40rem + 1rem + 20rem + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(2rem + 1rem + 40rem + 1rem + 15rem + 10px) <= width < calc(2rem + 1rem + 40rem + 1rem + 20rem + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(2rem + 1rem + 40rem + 1rem + 10rem + 10px) <= width < calc(2rem + 1rem + 40rem + 1rem + 15rem + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                                   width < calc(2rem + 1rem + 40rem + 1rem + 10rem + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-default), 50%);
                --sidenote-edgeout: calc(-13.6% + 1rem);
            }
        }
        /* minimal-theme .wide class line-width */
        @container style(--line-width: 50rem) {
            /* compare the visible width to line-numbers-width + minimal-extra-margin + line-width + sidenote-margin + sidenote-width + scrollbar-width */
            @container PageContainer (calc(2rem + 1rem + 50rem + 1rem + 20rem + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(2rem + 1rem + 50rem + 1rem + 15rem + 10px) <= width < calc(2rem + 1rem + 50rem + 1rem + 20rem + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(2rem + 1rem + 50rem + 1rem + 10rem + 10px) <= width < calc(2rem + 1rem + 50rem + 1rem + 15rem + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                                   width < calc(2rem + 1rem + 50rem + 1rem + 10rem + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-wide), 50%);
                --sidenote-edgeout: calc(-13.6% + 1rem);
            }
        }
    }
}
/* cases of minimal-theme with .minimal-line-nums off */
body:not(.minimal-line-nums) .markdown-preview-view.is-readable-line-width:is(.leftsided, .rightsided) .markdown-preview-sizer >div,
body:not(.minimal-line-nums) .markdown-source-view.is-readable-line-width:is(.leftsided, .rightsided) .cm-content >div {
    /* when minimal-theme is active */
    @container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
        /* minimal-theme default line-width */
        @container style(--line-width: 40rem) {
            /* compare the visible width to minimal-extra-margin + line-width + sidenote-margin + sidenote-width + scrollbar-width */
            @container PageContainer (calc(1rem + 40rem + 1rem + 20rem + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(1rem + 40rem + 1rem + 15rem + 10px) <= width < calc(1rem + 40rem + 1rem + 20rem + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(1rem + 40rem + 1rem + 10rem + 10px) <= width < calc(1rem + 40rem + 1rem + 15rem + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                            width < calc(1rem + 40rem + 1rem + 10rem + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-default), 50%);
                --sidenote-edgeout: calc(-13.6% + 1rem);
            }
        }
        /* minimal-theme .wide class line-width */
        @container style(--line-width: 50rem) {
            /* compare the visible width to minimal-extra-margin + line-width + sidenote-margin + sidenote-width + scrollbar-width */
            @container PageContainer (calc(1rem + 50rem + 1rem + 20rem + 10px) <= width) {
                --sidenote-width: 20rem;
            }
            @container PageContainer (calc(1rem + 50rem + 1rem + 15rem + 10px) <= width < calc(1rem + 50rem + 1rem + 20rem + 10px)) {
                --sidenote-width: 15rem;
            }
            @container PageContainer (calc(1rem + 50rem + 1rem + 10rem + 10px) <= width < calc(1rem + 50rem + 1rem + 15rem + 10px)) {
                --sidenote-width: 10rem;
            }
            @container PageContainer (                                            width < calc(1rem + 50rem + 1rem + 10rem + 10px)) {
                --sidenote-width: min(var(--sidenote-intrusive-width-RLW-minimal-theme-wide), 50%);
                --sidenote-edgeout: calc(-13.6% + 1rem);
            }
        }
    }
}


/* if the current document has leftsided/rightsided cssclasses, move sidenote's default position correspondingly to the right/left */
.markdown-source-view.leftsided, .markdown-preview-view.leftsided {
    --sidenote-default-position: right;
}
.markdown-source-view.rightsided, .markdown-preview-view.rightsided {
    --sidenote-default-position: left;
}

/* when Readable Line Width is on, move the document texts leftsided/rightsided */
.markdown-source-view.mod-cm6.is-readable-line-width.leftsided .cm-sizer,
.markdown-preview-view.is-readable-line-width.leftsided .markdown-preview-sizer {
    margin-left: 0rem;
}
.markdown-source-view.mod-cm6.is-readable-line-width.rightsided .cm-sizer,
.markdown-preview-view.is-readable-line-width.rightsided .markdown-preview-sizer {
    margin-right: 0rem;
}
/* minimal-theme compatibility: need higher specificity to override minimal-theme's !important property */
@container PageContainer (not style(--file-margins: 32px)) and style(--line-width) {
    .markdown-preview-view.is-readable-line-width.leftsided .markdown-preview-sizer>div,
    .markdown-source-view.mod-cm6.is-readable-line-width.leftsided .cm-contentContainer.cm-contentContainer>.cm-content>div,
    .markdown-source-view.mod-cm6.is-readable-line-width.leftsided .cm-sizer>.embedded-backlinks,
    .markdown-source-view.mod-cm6.is-readable-line-width.leftsided .cm-sizer>.inline-title,
    .markdown-source-view.mod-cm6.is-readable-line-width.leftsided .cm-sizer>.metadata-container {
        margin-left: 1rem !important;  /* need extra margin between line numbers (or the left border when line number is off) and main texts due to minimal-theme-modified layouts */
    }
    .markdown-preview-view.is-readable-line-width.rightsided .markdown-preview-sizer>div,
    .markdown-source-view.mod-cm6.is-readable-line-width.rightsided .cm-contentContainer.cm-contentContainer>.cm-content>div,
    .markdown-source-view.mod-cm6.is-readable-line-width.rightsided .cm-sizer>.embedded-backlinks,
    .markdown-source-view.mod-cm6.is-readable-line-width.rightsided .cm-sizer>.inline-title,
    .markdown-source-view.mod-cm6.is-readable-line-width.rightsided .cm-sizer>.metadata-container {
        margin-right: 1rem !important;  /* for consistency */
    }
}


/* [!sidenote] callouts: strip away default callout styles and the edit button */
.callout[data-callout|="sidenote"] {
    .callout-title {
        display: none;
    }
    --p-spacing: 0;
    margin-block: 0;
    background-color: transparent;
    padding: unset;
}
.cm-callout:has(.callout[data-callout|="sidenote"]) > .edit-block-button {
    display: none;
}
/* need higher specificity to override obsidian app's !important property */
.markdown-source-view.mod-cm6 .cm-content > .cm-callout[contenteditable=false]:has(.callout[data-callout|="sidenote"]) {
    overflow: visible;
    contain: none !important;
}
/* extra shift in Live Preview mode due to callouts syntax requiring an extra empty line */
.markdown-source-view .callout[data-callout|="sidenote"] {
    margin-top: 2.1em;
}

/* Tufte-style means smaller font-size, minimal margins and paddings, whereas Callout-style inherits normal font-size and broader paddings */
.sidenote, .sidenote-r, .sidenote-l, .callout[data-callout|="sidenote"] {
    margin-top: 0.3em;
    margin-bottom: 0;
/*  Tufte-CSS sets a sidenote font-size 0.786 of the paragraph font-size, but since obsidian default article font-size is already much smaller than Tufte, even smaller sidenotes would be uncomfortable, so I make it a bit larger, say, 0.82 */
    font-size: 0.82em;
    line-height: 1.3;
    vertical-align: baseline;
}

/* positioning part */

.markdown-preview-view, .markdown-source-view {
    .sidenote-r, .callout[data-callout="sidenote-r"] {
        position: relative;
        float: right;
        clear: right;
        @container not style(--sidenote-edgeout) {
            width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-r-non-intrusive);
        }
        @container style(--sidenote-edgeout) {
            max-width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-r-intrusive);
        }
    }

    .sidenote-l, .callout[data-callout="sidenote-l"] {
        position: relative;
        float: left;
        clear: left;
        @container not style(--sidenote-edgeout) {
            width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-l-non-intrusive);
        }
        @container style(--sidenote-edgeout) {
            max-width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-l-intrusive);
        }
    }

    .sidenote, .callout[data-callout="sidenote"] {
        position: relative;
        float: var(--sidenote-default-position);
        clear: var(--sidenote-default-position);
        @container not style(--sidenote-edgeout) {
            width: var(--sidenote-width);
            @container style(--sidenote-default-position: right) {
                margin-inline: var(--sidenote-margins-r-non-intrusive);
            }
            @container style(--sidenote-default-position: left) {
                margin-inline: var(--sidenote-margins-l-non-intrusive);
            }
        }
        @container style(--sidenote-edgeout) {
            max-width: var(--sidenote-width);
            @container style(--sidenote-default-position: right) {
                margin-inline: var(--sidenote-margins-r-intrusive);
            }
            @container style(--sidenote-default-position: left) {
                margin-inline: var(--sidenote-margins-l-intrusive);
            }
        }
    }
}

.callout[data-callout|="stickynote"] {
    .callout-title {
        display: none;
    }
    --p-spacing: 0;
    margin-block: 0;
}
.cm-callout:has(
    .callout[data-callout|="stickynote"],
    .callout[data-callout-metadata~="aside"], .callout[data-callout-metadata~="aside-r"], .callout[data-callout-metadata~="aside-l"]
) > .edit-block-button {
    display: none;
}
/* need higher specificity to override obsidian app's !important property */
.markdown-source-view.mod-cm6 .cm-content > .cm-callout[contenteditable=false]:has(
    .callout[data-callout|="stickynote"],
    .callout[data-callout-metadata~="aside"], .callout[data-callout-metadata~="aside-r"], .callout[data-callout-metadata~="aside-l"]
) {
    overflow: visible;
    contain: none !important;
}
/* extra shift in Live Preview mode due to callouts syntax requiring an extra empty line */
.markdown-source-view :is(
    .callout[data-callout|="stickynote"],
    .callout[data-callout-metadata~="aside"], .callout[data-callout-metadata~="aside-r"], .callout[data-callout-metadata~="aside-l"]
) {
    margin-top: 2.1em;
}

/* positioning part */

.markdown-preview-view, .markdown-source-view {
    .callout[data-callout="stickynote-r"], .callout[data-callout-metadata~="aside-r"] {
        position: relative;
        float: right;
        clear: right;
        @container not style(--sidenote-edgeout) {
            width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-r-non-intrusive);
        }
        @container style(--sidenote-edgeout) {
            max-width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-r-intrusive);
        }
    }

    .callout[data-callout="stickynote-l"], .callout[data-callout-metadata~="aside-l"] {
        position: relative;
        float: left;
        clear: left;
        @container not style(--sidenote-edgeout) {
            width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-l-non-intrusive);
        }
        @container style(--sidenote-edgeout) {
            max-width: var(--sidenote-width);
            margin-inline: var(--sidenote-margins-l-intrusive);
        }
    }

    .callout[data-callout="stickynote"], .callout[data-callout-metadata~="aside"] {
        position: relative;
        float: var(--sidenote-default-position);
        clear: var(--sidenote-default-position);
        @container not style(--sidenote-edgeout) {
            width: var(--sidenote-width);
            @container style(--sidenote-default-position: right) {
                margin-inline: var(--sidenote-margins-r-non-intrusive);
            }
            @container style(--sidenote-default-position: left) {
                margin-inline: var(--sidenote-margins-l-non-intrusive);
            }
        }
        @container style(--sidenote-edgeout) {
            max-width: var(--sidenote-width);
            @container style(--sidenote-default-position: right) {
                margin-inline: var(--sidenote-margins-r-intrusive);
            }
            @container style(--sidenote-default-position: left) {
                margin-inline: var(--sidenote-margins-l-intrusive);
            }
        }
    }
}
